// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// âœ… DEFINIR EL ENUM PRIMERO
enum TipoMovimiento {
  INGRESO
  EGRESO
}

model Usuario {
  createAt       DateTime         @default(now())
  id             Int              @id @default(autoincrement())
  email          String           @unique
  nombre         String
  password       String
  preferencias   Json?
  layout         String?
  movimiento     Movimiento[]
  categoria      Categoria[]
  meta           Meta[]
  pagoRecurrente PagoRecurrente[]
  credito        Credito[]
  deuda          Deuda[]
  widget         Widget[]
  
  @@map("usuarios") 
}

model Categoria {
  id             Int              @id @default(autoincrement())
  usuario        Usuario          @relation(fields: [usuarioId], references: [id])
  usuarioId      Int
  nombre         String
  movimiento     Movimiento[]
  pagoRecurrente PagoRecurrente[]
  
  @@map("categorias")  
}

model Movimiento {
  id          Int            @id @default(autoincrement())
  usuarioId   Int
  categoriaId Int
  nombre      String
  descripcion String?
  monto       Float
  tipo        TipoMovimiento 
  fecha       DateTime
  activo      Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  usuario     Usuario        @relation(fields: [usuarioId], references: [id])
  categoria   Categoria      @relation(fields: [categoriaId], references: [id])
  
  @@map("movimientos") 
}

model Meta {
  id            Int      @id @default(autoincrement())
  usuario       Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId     Int
  nombre        String
  montoObjetivo Float
  montoActual   Float
  fechaInicio   DateTime
  fechaFin      DateTime
  estado        String
  
  @@map("metas") 
}

model PagoRecurrente {
  id           Int       @id @default(autoincrement())
  usuario      Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId    Int
  nombre       String
  monto        Float
  frecuencia   Int
  proximaFecha DateTime
  pagado       Boolean
  categoria    Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId  Int
  
  @@map("pagos_recurrentes") 
}

model Credito {
  id            Int      @id @default(autoincrement())
  usuario       Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId     Int
  nombre        String
  montoTotal    Float
  montoRestante Float
  fechaLimite   DateTime
  tasa          Float
  diaPago       DateTime
  
  @@map("creditos") 
}

model Deuda {
  id            Int      @id @default(autoincrement())
  usuario       Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId     Int
  nombre        String
  montoTotal    Float
  montoRestante Float
  fechaLimite   DateTime
  
  @@map("deudas") 
}

model Widget {
  id        Int     @id @default(autoincrement())
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  tipo      String
  posicion  String
  
  @@map("widgets") 
}
